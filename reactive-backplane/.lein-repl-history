(clojuredocs 'assoc)
(clojuredocs "assoc")
(user/clojuredocs "assoc")
(doc assoc)
(clojuredocs assoc)
(clojuredocs require)
(clojuredoc doseq)
(clojuredocs doseq)
(doc prn)
(doc println)
(doc pr)
(map list {:1 1 :2 2} {:3 3 :4 4})
{:1 1}
{:4 4}
[:4 4]
(map pr {:1 1})
(doseq [x {:1 1}] (pr x))
(doseq [x {:1 1}] (prn x))
(doseq [x {:1 1 :2 2}] (prn x))
(map pr {:1 1 :2 2})
(map prn {:1 1 :2 2})
(map str {:1 1 :2 2})
(doc :use)
(doc use)
(doc refer)
(doc require)
(java.util.Date.)
(format "[%1 %2]" (java.util.Date))
(format "[%1 %2]" 1 2)
(format "[%1$ti %2$ti]" 1 2)
(format "[%1$tD %2$tD]" 1 2)
(doc format)
(doc javadoc)
(javadoc java.lang.String.format)
(javadoc java.lang.String)
(reactive-backplane/emit)
emit
clojuredocs
(clojuredocs dotimes)
(delay 5)
(let [x (delay 5)] @x)
(type (delay 5))
(clojuredocs delay)
(doc power)
power
(doc range)
(doc char)
(char 61)
(char 91)
(char 65)
(char 33)
(char 34)
(char 35)
(char 36)
\a
(int \a)
(map char (range 65 (+ 26 65)))
(str (map char (range 65 (+ 26 65))))
(pprint (apropos "str"))
(apropos "str")
(char 91)
(defn chars [start] (map (char (range start (+ start 26)))))
(chars "abc")
(doc chars)
(chars 1 2 3)
(chars [1 2 3])
(chars '(1 2 3))
(doc select-random)
(doc nth)
(rand-int 3)
(doc for)
(for [x (range 10)] (rand-int 3))
(for [x (range 100)] (rand-int 3))
(doc chars)
(doc do)
(java.language.float. 12.56)
(java.lang.float 12.2)
(java.lang.Float. 12.56)
(pprint (apropos "ate"))
(System/currentTimeMillis)
(use 'clojure-contrib.str-utils)
(conj 1 '(2 3))
(conj '(2 3) 1)
(list? '(2 3) 1)
(list? (conj '(2 3) 1))
(list? (cons 1 '(2 3))
)
(reduce + 0 [1 2 3])
timing
time
(reduce + 0 (range 1000000))
(reduce + 0 (range 10000000))
(reduce + 0 (range 100000000))
(reduce + 0 (range 1000000000))
(reduce + 0 (range 100))
(assoc :a 1)
(assoc {} :a 1)
(doc doseq)
(for [i (range 3)] (println i))
(doseq [i (range 3)] (println i))
(take 10 (for [i (range 100000000)] i))
(range 1 3)
(range 3)
(range 1 4)
(use 'reactive-backplane/elem)
(use 'reactive-backplane.elem)
elems
(list)
(put 42 [:a 7])
(put 37 5)
(ns user (:use [reactive-backplane.elem :as e]))
(e/list)
(e/put 'x [:a 5])
(e/list)
(e/get 'x)
